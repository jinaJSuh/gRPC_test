// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/************************comment by jina*******************************
 gRPC service: client 가 request 하고 server 가 response 할 떄 
 서로 약속하는 method(function) 와 message(data) 를 정의하는 작업  
 protocol Buffer 에  정의 한다.
 keyword : service rpc -> service name / service 가 제공하는 4개의 원격 method 정의
         : message     -> 통신할 5개 data type 정의      

 gRPC 는 4가지 종류의 원격 method를 제공한다.
 1.unary RPC : client 가 server 에게 1개의 message 보내면 
               server 가 계산해서 1개의 message 를 client 로 보냄
               ex)GetFeature()
 2.server-streaming RPC: client 가 server 에게  1개의 message 보내면 
               server 가 계산해서 다수개의 message 를 client 로 보냄           
               ex)ListFeatures()
 3.client-streaming RPC: client 가 server 에게  다수개의 message 보내면 
               server 가 계산해서 1개의 message 를 client 로 보냄           
               ex)RecordRoute()
 4.bidirectional-streaming RPC: client 가 server 에게  다수개의 message 보내면 
               server 가 계산해서 다수개의 message 를 client 로 보냄           
               ex)RouteChat()

  compile option : protoc --go_out=. 
                          --go_opt=paths=source_relative 
                          --go-grpc_out=. 
                          --go-grpc_opt=paths=source_relative routeguide/route_guide.proto 
************************************************************************/ 
syntax = "proto3";

option go_package = "google.golang.org/grpc/examples/route_guide/routeguide";
option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "RouteGuideProto";

package routeguide;

// Interface exported by the server.
service RouteGuide {
  rpc GetFeature(Point) returns (Feature) {} //1
  rpc ListFeatures(Rectangle) returns (stream Feature) {} //2
  rpc RecordRoute(stream Point) returns (RouteSummary) {} //3
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {} //4
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle { 
  Point lo = 1;       // One corner of the rectangle.
  Point hi = 2;       // The other corner of the rectangle.
}

// A feature names something at a given point.
// If a feature could not be named, the name is empty.
message Feature { 
  string name = 1;        // The name of the feature.
  Point location = 2;     // The point where the feature is detected.
}

// A RouteNote is a message sent while at a given point.
message RouteNote { 
  Point location = 1; // The location from which the message is sent.
  string message = 2;  // The message to be sent.
}

// A RouteSummary is received in response to a RecordRoute rpc.
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  int32 point_count = 1;  // The number of points received.
  int32 feature_count = 2;  // The number of known features passed while traversing the route.
  int32 distance = 3; // The distance covered in metres. 
  int32 elapsed_time = 4; // The duration of the traversal in seconds.
}
